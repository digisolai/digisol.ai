# Generated by Django 5.2.4 on 2025-08-05 20:06

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0020_agencyclientportal_agencyclientbilling_and_more'),
        ('learning', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Badge',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('badge_type', models.CharField(choices=[('tutorial_completion', 'Tutorial Completion'), ('learning_streak', 'Learning Streak'), ('marketing_expertise', 'Marketing Expertise'), ('ai_mastery', 'AI Mastery'), ('campaign_success', 'Campaign Success'), ('community_contribution', 'Community Contribution'), ('early_adopter', 'Early Adopter'), ('power_user', 'Power User')], max_length=50)),
                ('difficulty', models.CharField(choices=[('bronze', 'Bronze'), ('silver', 'Silver'), ('gold', 'Gold'), ('platinum', 'Platinum'), ('diamond', 'Diamond')], default='bronze', max_length=20)),
                ('icon_url', models.URLField(blank=True, null=True)),
                ('token_reward', models.IntegerField(default=0, help_text='Tokens awarded when badge is earned')),
                ('requirements', models.JSONField(default=dict, help_text='Requirements to earn this badge')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('tenant', models.ForeignKey(blank=True, help_text='Leave empty for global badges available to all tenants', null=True, on_delete=django.db.models.deletion.CASCADE, to='core.tenant')),
            ],
            options={
                'verbose_name': 'Badge',
                'verbose_name_plural': 'Badges',
                'db_table': 'badges',
                'ordering': ['difficulty', 'name'],
            },
        ),
        migrations.CreateModel(
            name='LearningAchievement',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('achievement_type', models.CharField(choices=[('tutorial_completed', 'Tutorial Completed'), ('streak_maintained', 'Learning Streak Maintained'), ('courses_finished', 'Courses Finished'), ('skills_mastered', 'Skills Mastered'), ('time_spent', 'Time Spent Learning'), ('ai_interactions', 'AI Interactions'), ('marketing_campaigns', 'Marketing Campaigns Created'), ('analytics_reports', 'Analytics Reports Generated')], max_length=50)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('value', models.IntegerField(default=0, help_text='Achievement value (e.g., number of tutorials completed)')),
                ('target_value', models.IntegerField(default=0, help_text='Target value to reach this achievement')),
                ('token_reward', models.IntegerField(default=0)),
                ('earned_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='learning_achievements', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Learning Achievement',
                'verbose_name_plural': 'Learning Achievements',
                'db_table': 'learning_achievements',
                'ordering': ['-earned_at'],
            },
        ),
        migrations.CreateModel(
            name='MarketingResource',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('content', models.TextField(help_text='Main content of the resource')),
                ('resource_type', models.CharField(choices=[('article', 'Article'), ('video', 'Video'), ('infographic', 'Infographic'), ('template', 'Template'), ('case_study', 'Case Study'), ('webinar', 'Webinar'), ('ebook', 'E-Book'), ('checklist', 'Checklist')], max_length=20)),
                ('category', models.CharField(choices=[('digital_marketing', 'Digital Marketing'), ('social_media', 'Social Media Marketing'), ('email_marketing', 'Email Marketing'), ('content_marketing', 'Content Marketing'), ('seo', 'SEO & SEM'), ('analytics', 'Analytics & Reporting'), ('automation', 'Marketing Automation'), ('branding', 'Brand Strategy'), ('lead_generation', 'Lead Generation'), ('conversion_optimization', 'Conversion Optimization')], max_length=30)),
                ('difficulty_level', models.CharField(choices=[('bronze', 'Bronze'), ('silver', 'Silver'), ('gold', 'Gold'), ('platinum', 'Platinum'), ('diamond', 'Diamond')], default='bronze', max_length=20)),
                ('estimated_read_time', models.IntegerField(default=5, help_text='Estimated reading time in minutes')),
                ('tags', models.JSONField(default=list, help_text='List of tags for categorization')),
                ('featured_image_url', models.URLField(blank=True, null=True)),
                ('external_url', models.URLField(blank=True, help_text='External link if content is hosted elsewhere', null=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('is_published', models.BooleanField(default=True)),
                ('view_count', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('tenant', models.ForeignKey(blank=True, help_text='Leave empty for global resources available to all tenants', null=True, on_delete=django.db.models.deletion.CASCADE, to='core.tenant')),
            ],
            options={
                'verbose_name': 'Marketing Resource',
                'verbose_name_plural': 'Marketing Resources',
                'db_table': 'marketing_resources',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserBadge',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('earned_at', models.DateTimeField(auto_now_add=True)),
                ('tokens_awarded', models.IntegerField(default=0)),
                ('badge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='earned_by_users', to='learning.badge')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='earned_badges', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Badge',
                'verbose_name_plural': 'User Badges',
                'db_table': 'user_badges',
                'ordering': ['-earned_at'],
                'unique_together': {('user', 'badge')},
            },
        ),
        migrations.CreateModel(
            name='UserResourceProgress',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_completed', models.BooleanField(default=False)),
                ('time_spent', models.IntegerField(default=0, help_text='Time spent in seconds')),
                ('last_accessed', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_progress', to='learning.marketingresource')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resource_progress', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Resource Progress',
                'verbose_name_plural': 'User Resource Progress',
                'db_table': 'user_resource_progress',
                'ordering': ['-last_accessed'],
                'unique_together': {('user', 'resource')},
            },
        ),
    ]
